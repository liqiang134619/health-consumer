/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dycn.airportconsumer.faceplate.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Policy extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4997385627749772128L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Policy\",\"namespace\":\"com.dycn.healthairport.faceplate.avro\",\"fields\":[{\"name\":\"calendar\",\"type\":{\"type\":\"record\",\"name\":\"Calendar\",\"fields\":[{\"name\":\"startDate\",\"type\":\"long\"},{\"name\":\"restingDays\",\"type\":{\"type\":\"array\",\"items\":\"int\"}}]}},{\"name\":\"passTime\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TimeSpan\",\"fields\":[{\"name\":\"startSeconds\",\"type\":\"int\"},{\"name\":\"span\",\"type\":\"int\"}]}}},{\"name\":\"passQuota\",\"type\":\"int\"},{\"name\":\"validTimestamp\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.dycn.healthairport.faceplate.avro.Calendar calendar;
  @Deprecated public java.util.List<com.dycn.healthairport.faceplate.avro.TimeSpan> passTime;
  @Deprecated public int passQuota;
  @Deprecated public long validTimestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Policy() {}

  /**
   * All-args constructor.
   * @param calendar The new value for calendar
   * @param passTime The new value for passTime
   * @param passQuota The new value for passQuota
   * @param validTimestamp The new value for validTimestamp
   */
  public Policy(com.dycn.healthairport.faceplate.avro.Calendar calendar, java.util.List<com.dycn.healthairport.faceplate.avro.TimeSpan> passTime, Integer passQuota, Long validTimestamp) {
    this.calendar = calendar;
    this.passTime = passTime;
    this.passQuota = passQuota;
    this.validTimestamp = validTimestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return calendar;
    case 1: return passTime;
    case 2: return passQuota;
    case 3: return validTimestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: calendar = (com.dycn.healthairport.faceplate.avro.Calendar)value$; break;
    case 1: passTime = (java.util.List<com.dycn.healthairport.faceplate.avro.TimeSpan>)value$; break;
    case 2: passQuota = (Integer)value$; break;
    case 3: validTimestamp = (Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'calendar' field.
   * @return The value of the 'calendar' field.
   */
  public com.dycn.healthairport.faceplate.avro.Calendar getCalendar() {
    return calendar;
  }

  /**
   * Sets the value of the 'calendar' field.
   * @param value the value to set.
   */
  public void setCalendar(com.dycn.healthairport.faceplate.avro.Calendar value) {
    this.calendar = value;
  }

  /**
   * Gets the value of the 'passTime' field.
   * @return The value of the 'passTime' field.
   */
  public java.util.List<com.dycn.healthairport.faceplate.avro.TimeSpan> getPassTime() {
    return passTime;
  }

  /**
   * Sets the value of the 'passTime' field.
   * @param value the value to set.
   */
  public void setPassTime(java.util.List<com.dycn.healthairport.faceplate.avro.TimeSpan> value) {
    this.passTime = value;
  }

  /**
   * Gets the value of the 'passQuota' field.
   * @return The value of the 'passQuota' field.
   */
  public Integer getPassQuota() {
    return passQuota;
  }

  /**
   * Sets the value of the 'passQuota' field.
   * @param value the value to set.
   */
  public void setPassQuota(Integer value) {
    this.passQuota = value;
  }

  /**
   * Gets the value of the 'validTimestamp' field.
   * @return The value of the 'validTimestamp' field.
   */
  public Long getValidTimestamp() {
    return validTimestamp;
  }

  /**
   * Sets the value of the 'validTimestamp' field.
   * @param value the value to set.
   */
  public void setValidTimestamp(Long value) {
    this.validTimestamp = value;
  }

  /**
   * Creates a new Policy RecordBuilder.
   * @return A new Policy RecordBuilder
   */
  public static com.dycn.healthairport.faceplate.avro.Policy.Builder newBuilder() {
    return new com.dycn.healthairport.faceplate.avro.Policy.Builder();
  }

  /**
   * Creates a new Policy RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Policy RecordBuilder
   */
  public static com.dycn.healthairport.faceplate.avro.Policy.Builder newBuilder(com.dycn.healthairport.faceplate.avro.Policy.Builder other) {
    return new com.dycn.healthairport.faceplate.avro.Policy.Builder(other);
  }

  /**
   * Creates a new Policy RecordBuilder by copying an existing Policy instance.
   * @param other The existing instance to copy.
   * @return A new Policy RecordBuilder
   */
  public static com.dycn.healthairport.faceplate.avro.Policy.Builder newBuilder(com.dycn.healthairport.faceplate.avro.Policy other) {
    return new com.dycn.healthairport.faceplate.avro.Policy.Builder(other);
  }

  /**
   * RecordBuilder for Policy instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Policy>
    implements org.apache.avro.data.RecordBuilder<Policy> {

    private com.dycn.healthairport.faceplate.avro.Calendar calendar;
    private com.dycn.healthairport.faceplate.avro.Calendar.Builder calendarBuilder;
    private java.util.List<com.dycn.healthairport.faceplate.avro.TimeSpan> passTime;
    private int passQuota;
    private long validTimestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.dycn.healthairport.faceplate.avro.Policy.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.calendar)) {
        this.calendar = data().deepCopy(fields()[0].schema(), other.calendar);
        fieldSetFlags()[0] = true;
      }
      if (other.hasCalendarBuilder()) {
        this.calendarBuilder = com.dycn.healthairport.faceplate.avro.Calendar.newBuilder(other.getCalendarBuilder());
      }
      if (isValidValue(fields()[1], other.passTime)) {
        this.passTime = data().deepCopy(fields()[1].schema(), other.passTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.passQuota)) {
        this.passQuota = data().deepCopy(fields()[2].schema(), other.passQuota);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.validTimestamp)) {
        this.validTimestamp = data().deepCopy(fields()[3].schema(), other.validTimestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Policy instance
     * @param other The existing instance to copy.
     */
    private Builder(com.dycn.healthairport.faceplate.avro.Policy other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.calendar)) {
        this.calendar = data().deepCopy(fields()[0].schema(), other.calendar);
        fieldSetFlags()[0] = true;
      }
      this.calendarBuilder = null;
      if (isValidValue(fields()[1], other.passTime)) {
        this.passTime = data().deepCopy(fields()[1].schema(), other.passTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.passQuota)) {
        this.passQuota = data().deepCopy(fields()[2].schema(), other.passQuota);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.validTimestamp)) {
        this.validTimestamp = data().deepCopy(fields()[3].schema(), other.validTimestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'calendar' field.
      * @return The value.
      */
    public com.dycn.healthairport.faceplate.avro.Calendar getCalendar() {
      return calendar;
    }

    /**
      * Sets the value of the 'calendar' field.
      * @param value The value of 'calendar'.
      * @return This builder.
      */
    public com.dycn.healthairport.faceplate.avro.Policy.Builder setCalendar(com.dycn.healthairport.faceplate.avro.Calendar value) {
      validate(fields()[0], value);
      this.calendarBuilder = null;
      this.calendar = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'calendar' field has been set.
      * @return True if the 'calendar' field has been set, false otherwise.
      */
    public boolean hasCalendar() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'calendar' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.dycn.healthairport.faceplate.avro.Calendar.Builder getCalendarBuilder() {
      if (calendarBuilder == null) {
        if (hasCalendar()) {
          setCalendarBuilder(com.dycn.healthairport.faceplate.avro.Calendar.newBuilder(calendar));
        } else {
          setCalendarBuilder(com.dycn.healthairport.faceplate.avro.Calendar.newBuilder());
        }
      }
      return calendarBuilder;
    }

    /**
     * Sets the Builder instance for the 'calendar' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.dycn.healthairport.faceplate.avro.Policy.Builder setCalendarBuilder(com.dycn.healthairport.faceplate.avro.Calendar.Builder value) {
      clearCalendar();
      calendarBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'calendar' field has an active Builder instance
     * @return True if the 'calendar' field has an active Builder instance
     */
    public boolean hasCalendarBuilder() {
      return calendarBuilder != null;
    }

    /**
      * Clears the value of the 'calendar' field.
      * @return This builder.
      */
    public com.dycn.healthairport.faceplate.avro.Policy.Builder clearCalendar() {
      calendar = null;
      calendarBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'passTime' field.
      * @return The value.
      */
    public java.util.List<com.dycn.healthairport.faceplate.avro.TimeSpan> getPassTime() {
      return passTime;
    }

    /**
      * Sets the value of the 'passTime' field.
      * @param value The value of 'passTime'.
      * @return This builder.
      */
    public com.dycn.healthairport.faceplate.avro.Policy.Builder setPassTime(java.util.List<com.dycn.healthairport.faceplate.avro.TimeSpan> value) {
      validate(fields()[1], value);
      this.passTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'passTime' field has been set.
      * @return True if the 'passTime' field has been set, false otherwise.
      */
    public boolean hasPassTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'passTime' field.
      * @return This builder.
      */
    public com.dycn.healthairport.faceplate.avro.Policy.Builder clearPassTime() {
      passTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'passQuota' field.
      * @return The value.
      */
    public Integer getPassQuota() {
      return passQuota;
    }

    /**
      * Sets the value of the 'passQuota' field.
      * @param value The value of 'passQuota'.
      * @return This builder.
      */
    public com.dycn.healthairport.faceplate.avro.Policy.Builder setPassQuota(int value) {
      validate(fields()[2], value);
      this.passQuota = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'passQuota' field has been set.
      * @return True if the 'passQuota' field has been set, false otherwise.
      */
    public boolean hasPassQuota() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'passQuota' field.
      * @return This builder.
      */
    public com.dycn.healthairport.faceplate.avro.Policy.Builder clearPassQuota() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'validTimestamp' field.
      * @return The value.
      */
    public Long getValidTimestamp() {
      return validTimestamp;
    }

    /**
      * Sets the value of the 'validTimestamp' field.
      * @param value The value of 'validTimestamp'.
      * @return This builder.
      */
    public com.dycn.healthairport.faceplate.avro.Policy.Builder setValidTimestamp(long value) {
      validate(fields()[3], value);
      this.validTimestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'validTimestamp' field has been set.
      * @return True if the 'validTimestamp' field has been set, false otherwise.
      */
    public boolean hasValidTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'validTimestamp' field.
      * @return This builder.
      */
    public com.dycn.healthairport.faceplate.avro.Policy.Builder clearValidTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Policy build() {
      try {
        Policy record = new Policy();
        if (calendarBuilder != null) {
          record.calendar = this.calendarBuilder.build();
        } else {
          record.calendar = fieldSetFlags()[0] ? this.calendar : (com.dycn.healthairport.faceplate.avro.Calendar) defaultValue(fields()[0]);
        }
        record.passTime = fieldSetFlags()[1] ? this.passTime : (java.util.List<com.dycn.healthairport.faceplate.avro.TimeSpan>) defaultValue(fields()[1]);
        record.passQuota = fieldSetFlags()[2] ? this.passQuota : (Integer) defaultValue(fields()[2]);
        record.validTimestamp = fieldSetFlags()[3] ? this.validTimestamp : (Long) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
