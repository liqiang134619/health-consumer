/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dycn.airportconsumer.faceplate.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class NewFaceFeatureStruct extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -218749299613434304L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NewFaceFeatureStruct\",\"namespace\":\"com.dycn.airportconsumer.faceplate.avro\",\"fields\":[{\"name\":\"featureType\",\"type\":{\"type\":\"enum\",\"name\":\"NewFeatureType\",\"symbols\":[\"RGB_FEATURE\",\"INFRARED_FEATURE\"]}},{\"name\":\"faceFeature\",\"type\":[\"null\",\"bytes\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.dycn.airportconsumer.faceplate.avro.NewFeatureType featureType;
  @Deprecated public java.nio.ByteBuffer faceFeature;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NewFaceFeatureStruct() {}

  /**
   * All-args constructor.
   * @param featureType The new value for featureType
   * @param faceFeature The new value for faceFeature
   */
  public NewFaceFeatureStruct(com.dycn.airportconsumer.faceplate.avro.NewFeatureType featureType, java.nio.ByteBuffer faceFeature) {
    this.featureType = featureType;
    this.faceFeature = faceFeature;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return featureType;
    case 1: return faceFeature;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: featureType = (com.dycn.airportconsumer.faceplate.avro.NewFeatureType)value$; break;
    case 1: faceFeature = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'featureType' field.
   * @return The value of the 'featureType' field.
   */
  public com.dycn.airportconsumer.faceplate.avro.NewFeatureType getFeatureType() {
    return featureType;
  }

  /**
   * Sets the value of the 'featureType' field.
   * @param value the value to set.
   */
  public void setFeatureType(com.dycn.airportconsumer.faceplate.avro.NewFeatureType value) {
    this.featureType = value;
  }

  /**
   * Gets the value of the 'faceFeature' field.
   * @return The value of the 'faceFeature' field.
   */
  public java.nio.ByteBuffer getFaceFeature() {
    return faceFeature;
  }

  /**
   * Sets the value of the 'faceFeature' field.
   * @param value the value to set.
   */
  public void setFaceFeature(java.nio.ByteBuffer value) {
    this.faceFeature = value;
  }

  /**
   * Creates a new NewFaceFeatureStruct RecordBuilder.
   * @return A new NewFaceFeatureStruct RecordBuilder
   */
  public static com.dycn.airportconsumer.faceplate.avro.NewFaceFeatureStruct.Builder newBuilder() {
    return new com.dycn.airportconsumer.faceplate.avro.NewFaceFeatureStruct.Builder();
  }

  /**
   * Creates a new NewFaceFeatureStruct RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NewFaceFeatureStruct RecordBuilder
   */
  public static com.dycn.airportconsumer.faceplate.avro.NewFaceFeatureStruct.Builder newBuilder(com.dycn.airportconsumer.faceplate.avro.NewFaceFeatureStruct.Builder other) {
    return new com.dycn.airportconsumer.faceplate.avro.NewFaceFeatureStruct.Builder(other);
  }

  /**
   * Creates a new NewFaceFeatureStruct RecordBuilder by copying an existing NewFaceFeatureStruct instance.
   * @param other The existing instance to copy.
   * @return A new NewFaceFeatureStruct RecordBuilder
   */
  public static com.dycn.airportconsumer.faceplate.avro.NewFaceFeatureStruct.Builder newBuilder(com.dycn.airportconsumer.faceplate.avro.NewFaceFeatureStruct other) {
    return new com.dycn.airportconsumer.faceplate.avro.NewFaceFeatureStruct.Builder(other);
  }

  /**
   * RecordBuilder for NewFaceFeatureStruct instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NewFaceFeatureStruct>
    implements org.apache.avro.data.RecordBuilder<NewFaceFeatureStruct> {

    private com.dycn.airportconsumer.faceplate.avro.NewFeatureType featureType;
    private java.nio.ByteBuffer faceFeature;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.dycn.airportconsumer.faceplate.avro.NewFaceFeatureStruct.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.featureType)) {
        this.featureType = data().deepCopy(fields()[0].schema(), other.featureType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.faceFeature)) {
        this.faceFeature = data().deepCopy(fields()[1].schema(), other.faceFeature);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing NewFaceFeatureStruct instance
     * @param other The existing instance to copy.
     */
    private Builder(com.dycn.airportconsumer.faceplate.avro.NewFaceFeatureStruct other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.featureType)) {
        this.featureType = data().deepCopy(fields()[0].schema(), other.featureType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.faceFeature)) {
        this.faceFeature = data().deepCopy(fields()[1].schema(), other.faceFeature);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'featureType' field.
      * @return The value.
      */
    public com.dycn.airportconsumer.faceplate.avro.NewFeatureType getFeatureType() {
      return featureType;
    }

    /**
      * Sets the value of the 'featureType' field.
      * @param value The value of 'featureType'.
      * @return This builder.
      */
    public com.dycn.airportconsumer.faceplate.avro.NewFaceFeatureStruct.Builder setFeatureType(com.dycn.airportconsumer.faceplate.avro.NewFeatureType value) {
      validate(fields()[0], value);
      this.featureType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'featureType' field has been set.
      * @return True if the 'featureType' field has been set, false otherwise.
      */
    public boolean hasFeatureType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'featureType' field.
      * @return This builder.
      */
    public com.dycn.airportconsumer.faceplate.avro.NewFaceFeatureStruct.Builder clearFeatureType() {
      featureType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'faceFeature' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getFaceFeature() {
      return faceFeature;
    }

    /**
      * Sets the value of the 'faceFeature' field.
      * @param value The value of 'faceFeature'.
      * @return This builder.
      */
    public com.dycn.airportconsumer.faceplate.avro.NewFaceFeatureStruct.Builder setFaceFeature(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.faceFeature = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'faceFeature' field has been set.
      * @return True if the 'faceFeature' field has been set, false otherwise.
      */
    public boolean hasFaceFeature() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'faceFeature' field.
      * @return This builder.
      */
    public com.dycn.airportconsumer.faceplate.avro.NewFaceFeatureStruct.Builder clearFaceFeature() {
      faceFeature = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public NewFaceFeatureStruct build() {
      try {
        NewFaceFeatureStruct record = new NewFaceFeatureStruct();
        record.featureType = fieldSetFlags()[0] ? this.featureType : (com.dycn.airportconsumer.faceplate.avro.NewFeatureType) defaultValue(fields()[0]);
        record.faceFeature = fieldSetFlags()[1] ? this.faceFeature : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
