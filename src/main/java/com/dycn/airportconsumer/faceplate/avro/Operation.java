/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dycn.airportconsumer.faceplate.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Operation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4845739291555276402L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Operation\",\"namespace\":\"com.dycn.airportconsumer.faceplate.avro\",\"fields\":[{\"name\":\"operationType\",\"type\":{\"type\":\"enum\",\"name\":\"OperationType\",\"symbols\":[\"ADD\",\"REMOVE\",\"MODIFY\"]}},{\"name\":\"person\",\"type\":{\"type\":\"record\",\"name\":\"Person\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"displayInfo\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"displayPic\",\"type\":[\"null\",\"bytes\"]},{\"name\":\"picChecksum\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"faceFeatures\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FaceFeatures\",\"fields\":[{\"name\":\"faceFeature\",\"type\":[\"null\",\"bytes\"]}]}}]},{\"name\":\"featureChecksum\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"otherInfoChecksum\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"cardNo\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"policy\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Policy\",\"fields\":[{\"name\":\"calendar\",\"type\":{\"type\":\"record\",\"name\":\"Calendar\",\"fields\":[{\"name\":\"startDate\",\"type\":\"long\"},{\"name\":\"restingDays\",\"type\":{\"type\":\"array\",\"items\":\"int\"}}]}},{\"name\":\"passTime\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TimeSpan\",\"fields\":[{\"name\":\"startSeconds\",\"type\":\"int\"},{\"name\":\"span\",\"type\":\"int\"}]}}},{\"name\":\"passQuota\",\"type\":\"int\"},{\"name\":\"validTimestamp\",\"type\":\"long\"}]}}]}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.dycn.airportconsumer.faceplate.avro.OperationType operationType;
  @Deprecated public com.dycn.airportconsumer.faceplate.avro.Person person;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Operation() {}

  /**
   * All-args constructor.
   * @param operationType The new value for operationType
   * @param person The new value for person
   */
  public Operation(com.dycn.airportconsumer.faceplate.avro.OperationType operationType, com.dycn.airportconsumer.faceplate.avro.Person person) {
    this.operationType = operationType;
    this.person = person;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return operationType;
    case 1: return person;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: operationType = (com.dycn.airportconsumer.faceplate.avro.OperationType)value$; break;
    case 1: person = (com.dycn.airportconsumer.faceplate.avro.Person)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'operationType' field.
   * @return The value of the 'operationType' field.
   */
  public com.dycn.airportconsumer.faceplate.avro.OperationType getOperationType() {
    return operationType;
  }

  /**
   * Sets the value of the 'operationType' field.
   * @param value the value to set.
   */
  public void setOperationType(com.dycn.airportconsumer.faceplate.avro.OperationType value) {
    this.operationType = value;
  }

  /**
   * Gets the value of the 'person' field.
   * @return The value of the 'person' field.
   */
  public com.dycn.airportconsumer.faceplate.avro.Person getPerson() {
    return person;
  }

  /**
   * Sets the value of the 'person' field.
   * @param value the value to set.
   */
  public void setPerson(com.dycn.airportconsumer.faceplate.avro.Person value) {
    this.person = value;
  }

  /**
   * Creates a new Operation RecordBuilder.
   * @return A new Operation RecordBuilder
   */
  public static com.dycn.airportconsumer.faceplate.avro.Operation.Builder newBuilder() {
    return new com.dycn.airportconsumer.faceplate.avro.Operation.Builder();
  }

  /**
   * Creates a new Operation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Operation RecordBuilder
   */
  public static com.dycn.airportconsumer.faceplate.avro.Operation.Builder newBuilder(com.dycn.airportconsumer.faceplate.avro.Operation.Builder other) {
    return new com.dycn.airportconsumer.faceplate.avro.Operation.Builder(other);
  }

  /**
   * Creates a new Operation RecordBuilder by copying an existing Operation instance.
   * @param other The existing instance to copy.
   * @return A new Operation RecordBuilder
   */
  public static com.dycn.airportconsumer.faceplate.avro.Operation.Builder newBuilder(com.dycn.airportconsumer.faceplate.avro.Operation other) {
    return new com.dycn.airportconsumer.faceplate.avro.Operation.Builder(other);
  }

  /**
   * RecordBuilder for Operation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Operation>
    implements org.apache.avro.data.RecordBuilder<Operation> {

    private com.dycn.airportconsumer.faceplate.avro.OperationType operationType;
    private com.dycn.airportconsumer.faceplate.avro.Person person;
    private com.dycn.airportconsumer.faceplate.avro.Person.Builder personBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.dycn.airportconsumer.faceplate.avro.Operation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.operationType)) {
        this.operationType = data().deepCopy(fields()[0].schema(), other.operationType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.person)) {
        this.person = data().deepCopy(fields()[1].schema(), other.person);
        fieldSetFlags()[1] = true;
      }
      if (other.hasPersonBuilder()) {
        this.personBuilder = com.dycn.airportconsumer.faceplate.avro.Person.newBuilder(other.getPersonBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Operation instance
     * @param other The existing instance to copy.
     */
    private Builder(com.dycn.airportconsumer.faceplate.avro.Operation other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.operationType)) {
        this.operationType = data().deepCopy(fields()[0].schema(), other.operationType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.person)) {
        this.person = data().deepCopy(fields()[1].schema(), other.person);
        fieldSetFlags()[1] = true;
      }
      this.personBuilder = null;
    }

    /**
      * Gets the value of the 'operationType' field.
      * @return The value.
      */
    public com.dycn.airportconsumer.faceplate.avro.OperationType getOperationType() {
      return operationType;
    }

    /**
      * Sets the value of the 'operationType' field.
      * @param value The value of 'operationType'.
      * @return This builder.
      */
    public com.dycn.airportconsumer.faceplate.avro.Operation.Builder setOperationType(com.dycn.airportconsumer.faceplate.avro.OperationType value) {
      validate(fields()[0], value);
      this.operationType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'operationType' field has been set.
      * @return True if the 'operationType' field has been set, false otherwise.
      */
    public boolean hasOperationType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'operationType' field.
      * @return This builder.
      */
    public com.dycn.airportconsumer.faceplate.avro.Operation.Builder clearOperationType() {
      operationType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'person' field.
      * @return The value.
      */
    public com.dycn.airportconsumer.faceplate.avro.Person getPerson() {
      return person;
    }

    /**
      * Sets the value of the 'person' field.
      * @param value The value of 'person'.
      * @return This builder.
      */
    public com.dycn.airportconsumer.faceplate.avro.Operation.Builder setPerson(com.dycn.airportconsumer.faceplate.avro.Person value) {
      validate(fields()[1], value);
      this.personBuilder = null;
      this.person = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'person' field has been set.
      * @return True if the 'person' field has been set, false otherwise.
      */
    public boolean hasPerson() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'person' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.dycn.airportconsumer.faceplate.avro.Person.Builder getPersonBuilder() {
      if (personBuilder == null) {
        if (hasPerson()) {
          setPersonBuilder(com.dycn.airportconsumer.faceplate.avro.Person.newBuilder(person));
        } else {
          setPersonBuilder(com.dycn.airportconsumer.faceplate.avro.Person.newBuilder());
        }
      }
      return personBuilder;
    }

    /**
     * Sets the Builder instance for the 'person' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.dycn.airportconsumer.faceplate.avro.Operation.Builder setPersonBuilder(com.dycn.airportconsumer.faceplate.avro.Person.Builder value) {
      clearPerson();
      personBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'person' field has an active Builder instance
     * @return True if the 'person' field has an active Builder instance
     */
    public boolean hasPersonBuilder() {
      return personBuilder != null;
    }

    /**
      * Clears the value of the 'person' field.
      * @return This builder.
      */
    public com.dycn.airportconsumer.faceplate.avro.Operation.Builder clearPerson() {
      person = null;
      personBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Operation build() {
      try {
        Operation record = new Operation();
        record.operationType = fieldSetFlags()[0] ? this.operationType : (com.dycn.airportconsumer.faceplate.avro.OperationType) defaultValue(fields()[0]);
        if (personBuilder != null) {
          record.person = this.personBuilder.build();
        } else {
          record.person = fieldSetFlags()[1] ? this.person : (com.dycn.airportconsumer.faceplate.avro.Person) defaultValue(fields()[1]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
