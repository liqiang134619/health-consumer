/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dycn.airportconsumer.faceplate.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class NewAccessRecordResult extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7239069619150332260L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NewAccessRecordResult\",\"namespace\":\"com.dycn.healthairport.faceplate.avro\",\"fields\":[{\"name\":\"accessRecord\",\"type\":{\"type\":\"record\",\"name\":\"NewAccessRecord\",\"fields\":[{\"name\":\"devId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"设备id\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"过人日志时间戳\"},{\"name\":\"personId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"人像id\"},{\"name\":\"featureIndex\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"featureMd5\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"人像的特征值的md5 hash值\"},{\"name\":\"similarity\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"人像比对的相似度\"},{\"name\":\"imagesList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"NewImageStruct\",\"fields\":[{\"name\":\"imageType\",\"type\":{\"type\":\"enum\",\"name\":\"NewImageType\",\"symbols\":[\"SCENE_IMAGE\",\"CAPTURED_IMAGE\",\"INFRARED_SCENE_IMAGE\",\"INFRARED_CAPTURED_IMAGE\"]}},{\"name\":\"image\",\"type\":[\"null\",\"bytes\"]}]}},\"doc\":\"捕获的人像图,包括捕获图,场景图,红外捕获图,红外场景图\"},{\"name\":\"featuresList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"NewFaceFeatureStruct\",\"fields\":[{\"name\":\"featureType\",\"type\":{\"type\":\"enum\",\"name\":\"NewFeatureType\",\"symbols\":[\"RGB_FEATURE\",\"INFRARED_FEATURE\"]}},{\"name\":\"faceFeature\",\"type\":[\"null\",\"bytes\"]}]}},\"doc\":\"人像的特征值,接口返回该值为null\"},{\"name\":\"cardNumber\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"卡号\"},{\"name\":\"passed\",\"type\":[{\"type\":\"record\",\"name\":\"NewAccessGranted\",\"fields\":[]},{\"type\":\"record\",\"name\":\"NewAccessDenied\",\"fields\":[]}]},{\"name\":\"password\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"密码\",\"default\":\"\"},{\"name\":\"verificationType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"过人比对方式，基本方式有：刷脸、刷卡、QR、密码、刷卡刷脸、刷脸密码、刷脸刷卡\",\"default\":\"\"},{\"name\":\"QRCode\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":\"\"}]}},{\"name\":\"checkpoint\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"每一条过人日志的唯一id\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.dycn.healthairport.faceplate.avro.NewAccessRecord accessRecord;
  /** 每一条过人日志的唯一id */
  @Deprecated public String checkpoint;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NewAccessRecordResult() {}

  /**
   * All-args constructor.
   * @param accessRecord The new value for accessRecord
   * @param checkpoint 每一条过人日志的唯一id
   */
  public NewAccessRecordResult(com.dycn.healthairport.faceplate.avro.NewAccessRecord accessRecord, String checkpoint) {
    this.accessRecord = accessRecord;
    this.checkpoint = checkpoint;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return accessRecord;
    case 1: return checkpoint;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: accessRecord = (com.dycn.healthairport.faceplate.avro.NewAccessRecord)value$; break;
    case 1: checkpoint = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'accessRecord' field.
   * @return The value of the 'accessRecord' field.
   */
  public com.dycn.healthairport.faceplate.avro.NewAccessRecord getAccessRecord() {
    return accessRecord;
  }

  /**
   * Sets the value of the 'accessRecord' field.
   * @param value the value to set.
   */
  public void setAccessRecord(com.dycn.healthairport.faceplate.avro.NewAccessRecord value) {
    this.accessRecord = value;
  }

  /**
   * Gets the value of the 'checkpoint' field.
   * @return 每一条过人日志的唯一id
   */
  public String getCheckpoint() {
    return checkpoint;
  }

  /**
   * Sets the value of the 'checkpoint' field.
   * 每一条过人日志的唯一id
   * @param value the value to set.
   */
  public void setCheckpoint(String value) {
    this.checkpoint = value;
  }

  /**
   * Creates a new NewAccessRecordResult RecordBuilder.
   * @return A new NewAccessRecordResult RecordBuilder
   */
  public static com.dycn.healthairport.faceplate.avro.NewAccessRecordResult.Builder newBuilder() {
    return new com.dycn.healthairport.faceplate.avro.NewAccessRecordResult.Builder();
  }

  /**
   * Creates a new NewAccessRecordResult RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NewAccessRecordResult RecordBuilder
   */
  public static com.dycn.healthairport.faceplate.avro.NewAccessRecordResult.Builder newBuilder(com.dycn.healthairport.faceplate.avro.NewAccessRecordResult.Builder other) {
    return new com.dycn.healthairport.faceplate.avro.NewAccessRecordResult.Builder(other);
  }

  /**
   * Creates a new NewAccessRecordResult RecordBuilder by copying an existing NewAccessRecordResult instance.
   * @param other The existing instance to copy.
   * @return A new NewAccessRecordResult RecordBuilder
   */
  public static com.dycn.healthairport.faceplate.avro.NewAccessRecordResult.Builder newBuilder(com.dycn.healthairport.faceplate.avro.NewAccessRecordResult other) {
    return new com.dycn.healthairport.faceplate.avro.NewAccessRecordResult.Builder(other);
  }

  /**
   * RecordBuilder for NewAccessRecordResult instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NewAccessRecordResult>
    implements org.apache.avro.data.RecordBuilder<NewAccessRecordResult> {

    private com.dycn.healthairport.faceplate.avro.NewAccessRecord accessRecord;
    private com.dycn.healthairport.faceplate.avro.NewAccessRecord.Builder accessRecordBuilder;
    /** 每一条过人日志的唯一id */
    private String checkpoint;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.dycn.healthairport.faceplate.avro.NewAccessRecordResult.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.accessRecord)) {
        this.accessRecord = data().deepCopy(fields()[0].schema(), other.accessRecord);
        fieldSetFlags()[0] = true;
      }
      if (other.hasAccessRecordBuilder()) {
        this.accessRecordBuilder = com.dycn.healthairport.faceplate.avro.NewAccessRecord.newBuilder(other.getAccessRecordBuilder());
      }
      if (isValidValue(fields()[1], other.checkpoint)) {
        this.checkpoint = data().deepCopy(fields()[1].schema(), other.checkpoint);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing NewAccessRecordResult instance
     * @param other The existing instance to copy.
     */
    private Builder(com.dycn.healthairport.faceplate.avro.NewAccessRecordResult other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.accessRecord)) {
        this.accessRecord = data().deepCopy(fields()[0].schema(), other.accessRecord);
        fieldSetFlags()[0] = true;
      }
      this.accessRecordBuilder = null;
      if (isValidValue(fields()[1], other.checkpoint)) {
        this.checkpoint = data().deepCopy(fields()[1].schema(), other.checkpoint);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'accessRecord' field.
      * @return The value.
      */
    public com.dycn.healthairport.faceplate.avro.NewAccessRecord getAccessRecord() {
      return accessRecord;
    }

    /**
      * Sets the value of the 'accessRecord' field.
      * @param value The value of 'accessRecord'.
      * @return This builder.
      */
    public com.dycn.healthairport.faceplate.avro.NewAccessRecordResult.Builder setAccessRecord(com.dycn.healthairport.faceplate.avro.NewAccessRecord value) {
      validate(fields()[0], value);
      this.accessRecordBuilder = null;
      this.accessRecord = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'accessRecord' field has been set.
      * @return True if the 'accessRecord' field has been set, false otherwise.
      */
    public boolean hasAccessRecord() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'accessRecord' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.dycn.healthairport.faceplate.avro.NewAccessRecord.Builder getAccessRecordBuilder() {
      if (accessRecordBuilder == null) {
        if (hasAccessRecord()) {
          setAccessRecordBuilder(com.dycn.healthairport.faceplate.avro.NewAccessRecord.newBuilder(accessRecord));
        } else {
          setAccessRecordBuilder(com.dycn.healthairport.faceplate.avro.NewAccessRecord.newBuilder());
        }
      }
      return accessRecordBuilder;
    }

    /**
     * Sets the Builder instance for the 'accessRecord' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.dycn.healthairport.faceplate.avro.NewAccessRecordResult.Builder setAccessRecordBuilder(com.dycn.healthairport.faceplate.avro.NewAccessRecord.Builder value) {
      clearAccessRecord();
      accessRecordBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'accessRecord' field has an active Builder instance
     * @return True if the 'accessRecord' field has an active Builder instance
     */
    public boolean hasAccessRecordBuilder() {
      return accessRecordBuilder != null;
    }

    /**
      * Clears the value of the 'accessRecord' field.
      * @return This builder.
      */
    public com.dycn.healthairport.faceplate.avro.NewAccessRecordResult.Builder clearAccessRecord() {
      accessRecord = null;
      accessRecordBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'checkpoint' field.
      * 每一条过人日志的唯一id
      * @return The value.
      */
    public String getCheckpoint() {
      return checkpoint;
    }

    /**
      * Sets the value of the 'checkpoint' field.
      * 每一条过人日志的唯一id
      * @param value The value of 'checkpoint'.
      * @return This builder.
      */
    public com.dycn.healthairport.faceplate.avro.NewAccessRecordResult.Builder setCheckpoint(String value) {
      validate(fields()[1], value);
      this.checkpoint = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'checkpoint' field has been set.
      * 每一条过人日志的唯一id
      * @return True if the 'checkpoint' field has been set, false otherwise.
      */
    public boolean hasCheckpoint() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'checkpoint' field.
      * 每一条过人日志的唯一id
      * @return This builder.
      */
    public com.dycn.healthairport.faceplate.avro.NewAccessRecordResult.Builder clearCheckpoint() {
      checkpoint = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public NewAccessRecordResult build() {
      try {
        NewAccessRecordResult record = new NewAccessRecordResult();
        if (accessRecordBuilder != null) {
          record.accessRecord = this.accessRecordBuilder.build();
        } else {
          record.accessRecord = fieldSetFlags()[0] ? this.accessRecord : (com.dycn.healthairport.faceplate.avro.NewAccessRecord) defaultValue(fields()[0]);
        }
        record.checkpoint = fieldSetFlags()[1] ? this.checkpoint : (String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
